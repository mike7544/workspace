package games;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;

import javax.imageio.ImageIO;
//import javax.sound.sampled.AudioInputStream;
//import javax.sound.sampled.AudioSystem;
//import javax.sound.sampled.Clip;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 * 
 * Tetris Video Game main program
 *
 */
@SuppressWarnings("serial")
class Tetris extends JPanel implements KeyListener, ActionListener,
		MouseListener {

	// private static final int AMOUNT_OF_BLOCKS = 6;
	// private static final int ROTATE_AMOUNT = 3;

	// private static final int BLOCK_WIDTH = 4;
	// private static final int BLOCK_HEIGHT = 4;

	// private static final int BLOCK_POS_X = 175;
	// private static final int BLOCK_POS_Y = 50;
	// private static final int BLOCK_SIZE = 25;

	// private static final int BOARD_WIDTH = 10;
	// private static final int BOARD_HEIGHT = 20;
	// private static final int BOARD_POS_X = 125;
	// private static final int BOARD_POS_Y = 75;

	private static final int BLOCK_THEMES_TOTAL = 10;
	private static final int BLOCK_TOTAL = 7;

//	private static final int BKGD_TOTAL = 15;
	private static final int BLOCK_SPEED = 550;

	private static final int GAME_POINTS = 250;
	private static final int GAME_MOVE_UP_LEVEL = 20;

	private int gameSpeed;
	private Timer gameTimer;

	// private int blockType;
	// private int nextBlockType;
	// private int rotateBlock;
	// private int blockLocateX;
	// private int blockLocateY;

	private int gameLevel;
	private int countLines;
	private int totalLines;

	private boolean pauseGame;
	private boolean turnOnGrid;
	private boolean endGame;
	private boolean controlKeyBox;

	//private boolean soundOn;
	private boolean justStarted;
	private boolean quitGame;

	private boolean overrideCommand;

	private GameBlock gameBlock;
	private GameBlock nextBlock;
	private GameBoard gameBoard;
	private GameImage gameImage;
	
	private Sound sound;
	private GameStats gameStats;
	
	//private BufferedImage[][] blockImage;
	//private BufferedImage[] backgroundImage;
	///private BufferedImage endGameImage;
	//private BufferedImage soundOnImage;
	//private BufferedImage soundOffImage;
	//private BufferedImage controlKeyImage;
	//private BufferedImage escKeyImage;

	//private BufferedImage logoTextLevel;
	//private BufferedImage logoTextLines;
	//private BufferedImage logoTextNext;
	//private BufferedImage logoTextScore;

	private int animateTime;
	//private int blockTheme;
	//private int backgroundTheme;
	//private LoadImage image;

	public Tetris() {

		// gameBlock = new GameObject(); // create game blocks
		gameBlock = new GameBlock();
		nextBlock = new GameBlock(); // create next block
		gameBoard = new GameBoard(); // create game board

		//gameImage = new GameImage();
		gameImage = new GameImage(BLOCK_THEMES_TOTAL, BLOCK_TOTAL);
		sound = new Sound();
		gameStats = new GameStats();
		
		//blockImage = new BufferedImage[BLOCK_THEMES_TOTAL][7]; // set space for
																// block images
		//backgroundImage = new BufferedImage[BKGD_TOTAL]; // set space for
															// background image
		//soundOn = true; // turn sound on
		sound.setSoundOn(true);
		//image = new LoadImage(); // initiate class to load image
		//loadGameImage(); // load all image for tetris
		setNextBlock(); // set the type of next brick
		setGame(); // initiate more values

		gameTimer = new Timer(gameSpeed, this); // create timer for tetris

		//
		// add mouse and key listener
		//
		this.addMouseListener(this);
		this.addKeyListener(this);
		this.setFocusable(true);
		this.requestFocus();

	}

	public void setGame() {

		setBlocks(); // initiate values for tetris blocks

		//
		// set game board size and location
		//
		// int[] boardGrid = new int[BOARD_WIDTH * BOARD_HEIGHT];
		// gameBoard.setObject(boardGrid, BOARD_WIDTH, BOARD_HEIGHT,
		// BLOCK_SIZE);
		// gameBoard.setBlockPosition(BOARD_POS_X, BOARD_POS_Y);
		gameBoard.setBoard();
		gameSpeed = BLOCK_SPEED;
		//totalScore = 0;
		gameStats.setTotalScore(0);
		gameLevel = 1;

		totalLines = 0;
		countLines = 0;

		pauseGame = false;
		endGame = false;
		controlKeyBox = false;

		turnOnGrid = false;
		justStarted = true;
		quitGame = false;

		overrideCommand = false;

		//blockTheme = BLOCK_THEMES_TOTAL;
		//backgroundTheme = 0;

		setBlocks(); // initiate new blocks

	}

	public boolean quit() {
		return endGame;
	}

	public void resetGame() {
		setGame();
	}

	public BufferedImage getImage(String filename) {
		BufferedImage tempImage = null;

		String filePath = "/images/" + filename;
		try {

			tempImage = ImageIO.read(getClass().getResourceAsStream(filePath));

		}

		catch (Exception ex) {
			System.out.println("file " + filePath + " not found");
		}

		return tempImage;
	}

	
	

	public boolean isTimeAnimated() {

		if (animateTime % 2 > 0) // check if animation is on
			return true;
		return false;

	}

	public void checkGameBoardRow() {
		while (gameBoard.isRowFull()) { // check if brick row is fill
			gameBoard.invertRow();
			countLines++;
		}

		if (countLines > 0) // if row is fill start animation
			animateTime = 5;

	}

	public void setGameStatistics() {

		//
		// calculate game points for each row that is fill
		//
		//if (countLines > 0) {
			//totalScore += countLines * GAME_POINTS;
			//totalLines += countLines;
			//countLines = 0;
		//}
		gameStats.setStats();
		if (!overrideCommand) // cheat code to move up a level
			gameLevel = (totalLines / GAME_MOVE_UP_LEVEL) + 1; // change game
																// level
	}

	private void setRenderingFonts(Graphics2D g2d) {

		//
		// add anti aliasing to
		// system fonts
		//
		RenderingHints renderHints = new RenderingHints(
				RenderingHints.KEY_ANTIALIASING,
				RenderingHints.VALUE_ANTIALIAS_ON);

		renderHints.put(RenderingHints.KEY_RENDERING,
				RenderingHints.VALUE_RENDER_QUALITY);

		g2d.setRenderingHints(renderHints);
	}

	@Override
	public void paintComponent(Graphics g) {
		this.paintComponents(g);
		Graphics2D g2d = (Graphics2D) g;

		setRenderingFonts(g2d); // add anti aliasing to fonts
		// updateTetris(); // update all brick values
		int tempLevel = gameLevel;

		gameTimer.start(); // start game timer
		checkGameBoardRow(); // check if row is fill with bricks

		//
		// if row is fill with bricks
		// then remove bricks and
		// start animateTime
		//
		if (animateTime == 0)
			gameBoard.dropBlock();
		else
			animateTime--;

		if (animateTime == 4) // if brick is remove play sound
			//playSound(1);
			sound.playRemoveBlocks();

		setGameStatistics(); // get game points, level and line count
		setGameSpeed(); // as level increase so does speed
		drawGameSprites(g2d); // draw all image

		//
		// if player change level
		// then change background image
		//
		if (tempLevel != gameLevel)
			//gameBoard.changeBkgdTheme();
			gameImage.changeBkgdTheme();
		

	}

	public void pressAnyKey(Graphics g2d) {
		g2d.drawString("Press any key to continue...", 100, 70);

	}

	public void drawGameMessage(Graphics g2d) {

		if (quitGame) { // display quit message
			pressAnyKey(g2d);
			//g2d.drawImage(endGameImage, 175, 200, null);
			g2d.drawImage(gameImage.getEndGameImage(),175,200,null);
		} else if (justStarted) { // display just started message
			pressAnyKey(g2d);
			//g2d.drawImage(controlKeyImage, 100, 100, null);
			g2d.drawImage(gameImage.getControlKeyImage(),100,100,null);

		} else if (controlKeyBox) // display instruction box
			//g2d.drawImage(controlKeyImage, 100, 100, null);
			g2d.drawImage(gameImage.getControlKeyImage(),100,100,null);

		if(sound.isSoundOn())
		//if (soundOn) // sound on or off image
			//g2d.drawImage(soundOnImage, 475, 525, 35, 35, null);
			g2d.drawImage(gameImage.getSoundOnImage(),475,525,35,35,null);

		else
			//g2d.drawImage(soundOffImage, 475, 525, 35, 35, null);
			g2d.drawImage(gameImage.getSoundOffImage(),475,525,35,35,null);


		//g2d.drawImage(escKeyImage, 100, 0, null); // display message to pause
		g2d.drawImage(gameImage.getEscKeyImage(),100,0,null);

													// game
	}

	public void drawGameStatistics(Graphics g2d) {
		g2d.setColor(Color.white);

		g2d.setFont(new Font("Courier", Font.BOLD, 20));

		//g2d.drawImage(logoTextNext, 475, 90, null);
		g2d.drawImage(gameImage.getLogoTextNext(),475,90,null);

		//g2d.drawImage(logoTextLevel, 475, 300, null);
		g2d.drawImage(gameImage.getLogoTextLevel(),475,300,null);

		g2d.drawString(Integer.toString(gameLevel), 475, 350);

		//g2d.drawImage(logoTextLines, 475, 375, null);
		g2d.drawImage(gameImage.getLogoTextLines(),475,375,null);

		g2d.drawString(Integer.toString(totalLines), 475, 425);

		//g2d.drawImage(logoTextScore, 475, 450, null);
		g2d.drawImage(gameImage.getLogoTextScore(),475,450,null);

		//g2d.drawString(Integer.toString(totalScore), 475, 500);
		g2d.drawString(Integer.toString(gameStats.getTotalScore()), 475, 500);

	}

	public void drawGameSprites(Graphics2D g2d) {

		Draw draw = new Draw();

		//
		// display image if isTimeAnimated is true
		//
		draw.showAllImage(isTimeAnimated());

		//
		// tetris brick image start at the
		// top of the game board a bit outside
		// the bound, remove part of the brick image that is
		// outside the bound of the game board
		//
		draw.setCutOff(75);

		//if (blockTheme == BLOCK_THEMES_TOTAL) {
		if (gameImage.getBlockTheme() == BLOCK_THEMES_TOTAL) {
			//
			// display background wallpaper
			//
			//g2d.drawImage(backgroundImage[backgroundTheme], 0, 0, getWidth(),
				//	getHeight(), null);
			g2d.drawImage(gameImage.getBackgroundImage(),0,0,getWidth(),getHeight(),null);


			draw.display(g2d, nextBlock); // show next tetris brick

			if (turnOnGrid) // display game grid
				draw.displayCheckerImage(g2d, gameBoard);

			else
				draw.setBackground(g2d, gameBoard, Color.BLACK);

			draw.display(g2d, gameBoard); // draw game board
			draw.display(g2d, gameBlock); // draw tetris brick

			// g2d.fillRoundRect(425,275, 175,300,30,30);
			// g2d.fillRect(getImage("background_crack.jpg",0,0,175,300,null));
			// g2d.drawImage(backgroundImage[9], 425, 275, 175, 300, null);
		} else {
			//
			// display background wallpaper
			//
			//g2d.drawImage(backgroundImage[backgroundTheme], 0, 0, getWidth(),
				//	getHeight(), null);
			g2d.drawImage(gameImage.getBackgroundImage(),0,0,getWidth(),getHeight(),null);

			//draw.display(g2d, nextBlock, blockImage[blockTheme]);
			draw.display(g2d, nextBlock, gameImage.getBlockImage());

			if (turnOnGrid) // display game grid
				draw.displayCheckerImage(g2d, gameBoard);

			else
				draw.setBackground(g2d, gameBoard, Color.BLACK);

			//draw.display(g2d, gameBoard, blockImage[blockTheme]); // draw game
			draw.display(g2d, gameBoard, gameImage.getBlockImage());

																	// board
			//draw.display(g2d, gameBlock, blockImage[blockTheme]); // draw
			draw.display(g2d, gameBlock, gameImage.getBlockImage());

			// tetris brick

		}

		//
		// background for statistics, score, levels, and sound image
		//
		g2d.fillRoundRect(425, 275, 175, 300, 30, 30);

		//
		// display game statistics
		// and message to player
		//
		drawGameStatistics(g2d);
		drawGameMessage(g2d);

	}

	public void addObjectToBackground() {

		gameBoard.addObject(gameBlock); // add tetris brick to game board
		setBlocks(); // update tetris brick value
	}

	/*
	 * public void updateTetris() {
	 * 
	 * // // set new tetris block type, size, // and location // //int[]
	 * nextGameBlock = GameBlocks.getBlock(blockType, rotateBlock);
	 * //gameBlock.setObject(nextGameBlock, BLOCK_WIDTH,
	 * BLOCK_HEIGHT,BLOCK_SIZE); //gameBlock.setPosition(blockLocateX,
	 * blockLocateY);
	 * 
	 * //gameBlock.getNextBlock(); }
	 */
	public void setNextBlock() {
		final int NEXT_BLOCK_POS_X = 475;
		final int NEXT_BLOCK_POS_Y = 125;

		//
		// randomly get new tetris brick
		//
		// Random randomizer = new Random();
		// nextBlockType = randomizer.nextInt(AMOUNT_OF_BLOCKS + 1);
		nextBlock.setNextBlock();
		nextBlock.getNextBlock();
		nextBlock.setBlockPosition(NEXT_BLOCK_POS_X, NEXT_BLOCK_POS_Y);

		//
		// set tetris brick size
		//
		// int[] nextGameBlock = GameBlocks.getBlock(nextBlockType, 0);
		// nextBlock.setObject(nextGameBlock,BLOCK_WIDTH,
		// BLOCK_HEIGHT,BLOCK_SIZE);

		//
		// set tetris brick location
		//
		// nextBlock.setBlockPosition(NEXT_BLOCK_POS_X ,NEXT_BLOCK_POS_Y);
	}

	public void setBlocks() {
		final int BLOCK_POS_X = 175;
		final int BLOCK_POS_Y = 50;
		//
		// set the rotate, location,
		// and block type for tetris brick
		//
		// rotateBlock = 0;
		// blockLocateX = BLOCK_POS_X;
		// blockLocateY = BLOCK_POS_Y;
		gameBlock.resetBlock();
		// blockType = nextBlockType;
		gameBlock.getBlockType(nextBlock.getBlockType());
		gameBlock.setBlockPosition(BLOCK_POS_X, BLOCK_POS_Y);
		setNextBlock(); // set new values for the next tetris brick
	}

	@Override
	public void keyPressed(KeyEvent e) {

		//
		// temporally hold tetris brick value
		//
		int tempRotateBlock = gameBlock.getBlockRotate(); // rotateBlock;
		int tempBlockLocateX = gameBlock.getBlockPosX();// blockLocateX;
		int tempBlockLocateY = gameBlock.getBlockPosY();// blockLocateY;

		int keyPress = e.getKeyCode(); // get key player press
		boolean bRotate = false;

		//
		// if player died
		// or choose to quit
		//
		if (endGame) {
			keyPress = 0;
			quitGame = false;
		}

		//
		// pause game so player
		// can read instructions
		// before game start
		//
		if (justStarted) {
			keyPress = 0;
			justStarted = false;

		} else if (quitGame) { // if player quit game
			keyPress = 0;
			endGame = true;

		}

		switch (keyPress) { // read which key is press

		case KeyEvent.VK_UP:
			/*
			 * if (rotateBlock < ROTATE_AMOUNT) rotateBlock++; else rotateBlock
			 * = 0;
			 */
			gameBlock.rotateBlock();

			bRotate = true;
			break;

		case KeyEvent.VK_DOWN:
			// blockLocateY += BLOCK_SIZE;
			gameBlock.moveBlockDown();
			break;

		case KeyEvent.VK_LEFT:
			// blockLocateX += -BLOCK_SIZE;
			gameBlock.moveBlockLeft();
			break;

		case KeyEvent.VK_RIGHT:
			// blockLocateX += BLOCK_SIZE;
			gameBlock.moveBlockRight();
			break;

		case KeyEvent.VK_SPACE:
			if (pauseGame)
				break;
			gameBoard.superDrop(gameBlock);
			//
			// instantly drop brick and
			// check if brick is in bound
			//

			// while (gameBoard.inBound(gameBlock) &&
			// !gameBoard.hasObject(gameBlock)) {
			// tempBlockLocateY = gameBlock.getBlockPosY();//blockLocateY;
			// gameBlock.moveBlockDown();
			// blockLocateY += BLOCK_SIZE;

			//
			// update tetris values
			// while brick is being
			// pull down
			//
			// updateTetris();
			// }

			// blockLocateY = tempBlockLocateY; // set brick new location
			// //gameBlock.setBlockPosY(tempBlockLocateY);
			// gameBlock.setBlockPos();

			// updateTetris(); // update tetris values
			addObjectToBackground(); // add brick to game board
			//playSound(0); // drop tetris brick sound
			sound.playInstantDrop();

			break;
		case KeyEvent.VK_S:
			//soundOn = !soundOn;
			sound.setSoundOnOff();
			break;
		case KeyEvent.VK_T:
			changeGameTheme();
			break;
		case KeyEvent.VK_G:
			turnOnGrid = !turnOnGrid;
			break;
		case KeyEvent.VK_Q:
			quitGame = true;
			break;
		case KeyEvent.VK_B:
			//changeBkgdTheme();
			gameImage.changeBkgdTheme();
			break;
		case KeyEvent.VK_L:
			gameLevel++;
			overrideCommand = true;
			break;
		case KeyEvent.VK_ESCAPE:
		case KeyEvent.VK_P:

			//
			// pause game and show
			// control dialog box
			//
			controlKeyBox = !controlKeyBox;
			pauseGame = controlKeyBox;
			break;
		}

		//
		// update tetris brick with
		// new values
		//
		if (pauseGame) {
			// rotateBlock = tempRotateBlock;
			// blockLocateX = tempBlockLocateX;
			// blockLocateY = tempBlockLocateY;
			gameBlock.setBlockRotate(tempRotateBlock);
			gameBlock.setBlockPosX(tempBlockLocateX);
			gameBlock.setBlockPosY(tempBlockLocateY);

		}

		else {
			// updateTetris(); // update tetris values

			//
			// if tetris brick is inside game board
			// and does not overlap another brick
			//

			// if (gameBoard.inBound(gameBlock) &&
			// !gameBoard.hasObject(gameBlock)) {
			if (gameBoard.isBlockInsideBoard(gameBlock)) {
				if (bRotate)
					sound.playRotateBlock();
					//playSound(2); // rotate tetris brick sound
				else
					this.repaint();
			}

			//
			// update tetris brick with
			// new values
			//
			else {
				// rotateBlock = tempRotateBlock;
				// blockLocateX = tempBlockLocateX;
				// blockLocateY = tempBlockLocateY;
				gameBlock.setBlockPosX(tempBlockLocateX);
				gameBlock.setBlockPosY(tempBlockLocateY);
				gameBlock.setBlockRotate(tempRotateBlock);

				// updateTetris();

			}
		}

	}

	@Override
	public void keyTyped(KeyEvent e) {
	}

	@Override
	public void keyReleased(KeyEvent e) {
	}

	@Override
	public void actionPerformed(ActionEvent e) {

		//
		// pause game for certain action
		// for example player pause game,
		// just started, or brick animation
		//

		if (pauseGame || animateTime > 0 || justStarted)
			repaint();
		else if (!quitGame && !endGame)
			dropBlocks(); // pull tetris brick down

	}

	public void dropBlocks() {

		int tempBlockLocateY = gameBlock.getBlockPosY();// blockLocateY;

		// blockLocateY += BLOCK_SIZE;
		gameBlock.moveBlockDown();
		// updateTetris(); // update tetris brick values

		//
		// if brick is inside game board
		// and not have the same brick
		// in the same location
		//
		// if (gameBoard.inBound(gameBlock) && !gameBoard.hasObject(gameBlock))
		if (gameBoard.isBlockInsideBoard(gameBlock))
			repaint();

		else {
			// blockLocateY = tempBlockLocateY;
			gameBlock.setBlockPosY(tempBlockLocateY);
			gameBlock.setBlockPos();

			// updateTetris();
			//
			// if no more tetris brick
			// can fit on board
			// then end game
			//
			if (gameBoard.hasObject(gameBlock)) {
				quitGame = true;
				//playSound(3);
				sound.playEndGame();

			} else {

				addObjectToBackground(); // add tetris brick to game board
			}
			repaint();
		}
	}

	public void changeGameTheme() {
		gameImage.changeBkgdTheme();
		gameImage.changeBlockTheme();

		//changeBkgdTheme(); // change background image
		//changeBlockTheme(); // change block image
	}

	//public void changeBkgdTheme() {

		//if (backgroundTheme >= backgroundImage.length - 1)
		//	backgroundTheme = 0; // first background image
		//else
		//	backgroundTheme++; // next background image
	//	gameImage.changeBkgdTheme();
		//backgroundTheme = gameImage.getBkgdTheme();
	//}

	//public void changeBlockTheme() {
	//	gameImage.changeBlockTheme();
		//if (blockTheme >= BLOCK_THEMES_TOTAL)
			//blockTheme = 0; // first block theme
		//else
			//blockTheme++; // next block theme
	//}

	public void setGameSpeed() {

		//
		// as player advance through
		// the levels,
		// game speed increase
		//
		switch (gameLevel) {
		case 2:
			gameSpeed = 500;
			break;
		case 3:
			gameSpeed = 450;
			break;
		case 4:
			gameSpeed = 400;
			break;
		case 5:
			gameSpeed = 350;
			break;
		case 6:
			gameSpeed = 300;
			break;
		case 7:
			gameSpeed = 250;
			break;
		case 8:
			gameSpeed = 200;
			break;
		case 9:
			gameSpeed = 150;
			break;
		case 10:
			gameSpeed = 100;
			break;

		}

		//
		// change game timer speed
		// to display brick animation
		//
		if (animateTime > 0)
			gameTimer.setDelay(50);

		else
			gameTimer.setDelay(gameSpeed); // return to normal timer speed
	}

	@Override
	public void mouseClicked(MouseEvent e) {
		final int ICON_POS_X1 = 475;
		final int ICON_POS_X2 = 499;
		final int ICON_POS_Y1 = 525;
		final int ICON_POS_Y2 = 560;
		//
		// if mouse is pointing at
		// sound image
		//
		//boolean bHar = e.getX() > 475 && e.getX() < 499;
		//boolean bVer = e.getY() > 525 && e.getY() < 560;
		
		boolean bHar = e.getX() > ICON_POS_X1 && e.getX() < ICON_POS_X2;
		boolean bVer = e.getY() > ICON_POS_Y1 && e.getY() <  ICON_POS_Y2;
		//
		// click sound image to turn on/off
		//
		if (bHar && bVer)
			//soundOn = !soundOn;
			sound.setSoundOnOff();
	}

	@Override
	public void mousePressed(MouseEvent e) {
	}

	@Override
	public void mouseReleased(MouseEvent e) {
	}

	@Override
	public void mouseEntered(MouseEvent e) {
	}

	@Override
	public void mouseExited(MouseEvent e) {
	}

}
