package games;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
//import java.awt.image.BufferedImage;

//import javax.imageio.ImageIO;
//import javax.gameSound.sampled.AudioInputStream;
//import javax.gameSound.sampled.AudioSystem;
//import javax.gameSound.sampled.Clip;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 * 
 * Tetris Video Game main program
 *
 */
@SuppressWarnings("serial")
class Tetris extends JPanel implements KeyListener, ActionListener,
		MouseListener {

	
	private GameBlock gameBlock;
	private GameBlock nextBlock;
	private GameBoard gameBoard;
	private GameImage gameImage;

	private GameSound gameSound;
	private GameStats gameStats;
	private GameControls gameControls;

	private int animateTime;
	private Timer gameTimer;


	public Tetris() {

		// gameBlock = new GameObject(); // create game blocks
		gameBlock = new GameBlock();
		nextBlock = new GameBlock(); // create next block
		gameBoard = new GameBoard(); // create game board

		// gameImage = new GameImage();
		gameSound = new GameSound();
		gameStats = new GameStats();
		gameImage = new GameImage();

		gameControls = new GameControls();

		// blockImage = new BufferedImage[BLOCK_THEMES_TOTAL][7]; // set space
		// for
		// block images
		// backgroundImage = new BufferedImage[BKGD_TOTAL]; // set space for
		// background image
		// soundOn = true; // turn gameSound on
		gameSound.setSoundOn(true);
		// image = new LoadImage(); // initiate class to load image
		// loadGameImage(); // load all image for tetris
		// setNextBlock(); // set the type of next brick
		setGame(); // initiate more values

		gameTimer = new Timer(gameControls.getGameSpeed(), this);

		//
		// add mouse and key listener
		//
		this.addMouseListener(this);
		this.addKeyListener(this);
		this.setFocusable(true);
		this.requestFocus();

	}

	public void setGame() {

	
		gameBoard.setBoard();
		// gameSpeed = BLOCK_SPEED;

		gameStats.setStats();
		gameControls.setControls();


		setBlocks(); // initiate new blocks

	}

	public void setBlocks() {
		final int BLOCK_POS_X = 175;
		final int BLOCK_POS_Y = 50;
		final int NEXT_BLOCK_POS_X = 475;
		final int NEXT_BLOCK_POS_Y = 125;
		
		gameBlock.resetBlock();
		// blockType = nextBlockType;
		gameBlock.getBlockType(nextBlock.getBlockType());
		gameBlock.setBlockPosition(BLOCK_POS_X, BLOCK_POS_Y);

		nextBlock.setNextBlock();
		nextBlock.getNextBlock();
		nextBlock.setBlockPosition(NEXT_BLOCK_POS_X, NEXT_BLOCK_POS_Y);

		// setNextBlock(); // set new values for the next tetris brick
	}

	public boolean quit() {
		return gameControls.isEndGame();// endGame;
	}

	public void resetGame() {
		setGame();
	}


	public boolean isTimeAnimated() {

		if (animateTime % 2 > 0) // check if animation is on
			return true;
		return false;

	}

	public void checkGameBoardRow() {
		while (gameBoard.isRowFull()) { // check if brick row is fill
			gameBoard.invertRow();
			// countLines++;
			gameStats.addLines();
		}

		// if (countLines > 0) // if row is fill start animation
		if (gameStats.getCountLines() > 0)
			animateTime = 5;

	}

	public void setGameStatistics() {

		//
		// calculate game points for each row that is fill
		//
		// if (countLines > 0) {
		// totalScore += countLines * GAME_POINTS;
		// totalLines += countLines;
		// countLines = 0;
		// }
		gameStats.setGamePoints();
		// if (!overrideCommand) // cheat code to move up a level
		if (gameControls.isOverrideCommand())
			gameStats.changeLevel();
		// gameLevel = (totalLines / GAME_MOVE_UP_LEVEL) + 1; // change game
		// level
	}

	private void setRenderingFonts(Graphics2D g2d) {

		//
		// add anti aliasing to
		// system fonts
		//
		RenderingHints renderHints = new RenderingHints(
				RenderingHints.KEY_ANTIALIASING,
				RenderingHints.VALUE_ANTIALIAS_ON);

		renderHints.put(RenderingHints.KEY_RENDERING,
				RenderingHints.VALUE_RENDER_QUALITY);

		g2d.setRenderingHints(renderHints);
	}

	@Override
	public void paintComponent(Graphics g) {
		this.paintComponents(g);
		Graphics2D g2d = (Graphics2D) g;

		setRenderingFonts(g2d); // add anti aliasing to fonts
		// updateTetris(); // update all brick values
		int tempLevel = gameStats.getGameLevel();// gameLevel;

		gameTimer.start(); // start game timer
		checkGameBoardRow(); // check if row is fill with bricks

		//
		// if row is fill with bricks
		// then remove bricks and
		// start animateTime
		
		if (animateTime == 0)
			gameBoard.dropBlock();
		else
			animateTime--;

		if (animateTime == 4) // if brick is remove play gameSound
			// playSound(1);
			gameSound.playRemoveBlocks();

		setGameStatistics(); // get game points, level and line count
		setGameSpeed(); // as level increase so does speed
		drawGameSprites(g2d); // draw all image

		//
		// if player change level
		// then change background image
		//
		if (tempLevel != gameStats.getGameLevel())// gameLevel)
			// gameBoard.changeBkgdTheme();
			gameImage.changeBkgdTheme();

	}

	public void pressAnyKey(Graphics g2d) {
		g2d.drawString("Press any key to continue...", 100, 70);

	}

	public void drawGameMessage(Graphics g2d) {
		
		// if (quitGame) { // display quit message
		if (gameControls.isQuitGame()) {
			pressAnyKey(g2d);
			// g2d.drawImage(endGameImage, 175, 200, null);
			g2d.drawImage(gameImage.getEndGameImage(), 175, 200, null);
			// } else if (justStarted) { // display just started message
		} else if (gameControls.isJustStarted()) {
			pressAnyKey(g2d);
			// g2d.drawImage(controlKeyImage, 100, 100, null);
			g2d.drawImage(gameImage.getControlKeyImage(), 100, 100, null);

			// } else if (controlKeyBox) // display instruction box
		} else if (gameControls.isControlKeyBox())
			// g2d.drawImage(controlKeyImage, 100, 100, null);
			g2d.drawImage(gameImage.getControlKeyImage(), 100, 100, null);

		if (gameSound.isSoundOn())
			// if (soundOn) // gameSound on or off image
			// g2d.drawImage(soundOnImage, 475, 525, 35, 35, null);
			g2d.drawImage(gameImage.getSoundOnImage(), 475, 525, 35, 35, null);

		else
			// g2d.drawImage(soundOffImage, 475, 525, 35, 35, null);
			g2d.drawImage(gameImage.getSoundOffImage(), 475, 525, 35, 35, null);

		// g2d.drawImage(escKeyImage, 100, 0, null); // display message to pause
		g2d.drawImage(gameImage.getEscKeyImage(), 100, 0, null);

		
	}

	public void drawGameStatistics(Graphics g2d) {
		g2d.setColor(Color.white);

		g2d.setFont(new Font("Courier", Font.BOLD, 20));

		// g2d.drawImage(logoTextNext, 475, 90, null);
		g2d.drawImage(gameImage.getLogoTextNext(), 475, 90, null);

		// g2d.drawImage(logoTextLevel, 475, 300, null);
		g2d.drawImage(gameImage.getLogoTextLevel(), 475, 300, null);

		g2d.drawString(Integer.toString(gameStats.getGameLevel()), 475, 350);

		// g2d.drawImage(logoTextLines, 475, 375, null);
		g2d.drawImage(gameImage.getLogoTextLines(), 475, 375, null);

		g2d.drawString(Integer.toString(gameStats.getTotalLines()), 475, 425);

		// g2d.drawImage(logoTextScore, 475, 450, null);
		g2d.drawImage(gameImage.getLogoTextScore(), 475, 450, null);

		// g2d.drawString(Integer.toString(totalScore), 475, 500);
		g2d.drawString(Integer.toString(gameStats.getTotalScore()), 475, 500);

	}

	public void drawGameSprites(Graphics2D g2d) {

		Draw draw = new Draw(g2d);

		//
		// display image if isTimeAnimated is true
		//
		draw.showAllImage(isTimeAnimated());

		//
		// tetris brick image start at the
		// top of the game board a bit outside
		// the bound, remove part of the brick image that is
		// outside the bound of the game board
		//
		draw.setCutOff(75);

		// if (blockTheme == BLOCK_THEMES_TOTAL) {
		// if (gameImage.getBlockTheme() == BLOCK_THEMES_TOTAL) {
		if (gameImage.isMaxTheme()) {
			//
			// display background wallpaper
			//
			// g2d.drawImage(backgroundImage[backgroundTheme], 0, 0, getWidth(),
			// getHeight(), null);
			g2d.drawImage(gameImage.getBackgroundImage(), 0, 0, getWidth(),
					getHeight(), null);

			draw.display(nextBlock); // show next tetris brick

			if (gameControls.isTurnOnGrid())// turnOnGrid) // display game grid
				draw.displayCheckerImage(gameBoard);

			else
				draw.setBackground(gameBoard, Color.BLACK);

			draw.display(gameBoard); // draw game board
			draw.display(gameBlock); // draw tetris brick

			// g2d.fillRoundRect(425,275, 175,300,30,30);
			// g2d.fillRect(getImage("background_crack.jpg",0,0,175,300,null));
			// g2d.drawImage(backgroundImage[9], 425, 275, 175, 300, null);
		} else {
			//
			// display background wallpaper
			//
			// g2d.drawImage(backgroundImage[backgroundTheme], 0, 0, getWidth(),
			// getHeight(), null);
			g2d.drawImage(gameImage.getBackgroundImage(), 0, 0, getWidth(),
					getHeight(), null);

			// draw.display(g2d, nextBlock, blockImage[blockTheme]);
			draw.display(nextBlock, gameImage.getBlockImage());

			if (gameControls.isTurnOnGrid())// turnOnGrid) // display game grid
				draw.displayCheckerImage(gameBoard);

			else
				draw.setBackground(gameBoard, Color.BLACK);

			// draw.display(g2d, gameBoard, blockImage[blockTheme]); // draw
			// game
			draw.display(gameBoard, gameImage.getBlockImage());

			// board
			// draw.display(g2d, gameBlock, blockImage[blockTheme]); // draw
			draw.display(gameBlock, gameImage.getBlockImage());

			// tetris brick

		}

		//
		// background for statistics, score, levels, and gameSound image
		//
		g2d.fillRoundRect(425, 275, 175, 300, 30, 30);

		//
		// display game statistics
		// and message to player
		//
		drawGameStatistics(g2d);
		drawGameMessage(g2d);

	}

	public void addObjectToBackground() {

		gameBoard.add(gameBlock); // add tetris brick to game board
		setBlocks(); // update tetris brick value
	}

	

	@Override
	public void keyPressed(KeyEvent e) {

		//
		// temporally hold tetris brick value
		//
		int tempRotateBlock = gameBlock.getBlockRotate(); // rotateBlock;
		int tempBlockLocateX = gameBlock.getBlockPosX();// blockLocateX;
		int tempBlockLocateY = gameBlock.getBlockPosY();// blockLocateY;

		int keyPress = e.getKeyCode(); // get key player press
		boolean bRotate = false;

		//
		// if player died
		// or choose to quit
		//
		if (gameControls.isEndGame()) { // endGame) {
			keyPress = 0;
			// quitGame = false;
			gameControls.setQuitGame(false);
		}

		//
		// pause game so player
		// can read instructions
		// before game start
		//
		if (gameControls.isJustStarted()) { // justStarted) {
			keyPress = 0;
			// justStarted = false;
			gameControls.setJustStarted(false);

		} else if (gameControls.isQuitGame()) {// quitGame) { // if player quit
												// game
			keyPress = 0;
			// endGame = true;
			gameControls.setEndGame(true);

		}

		switch (keyPress) { // read which key is press

		case KeyEvent.VK_UP:
			/*
			 * if (rotateBlock < ROTATE_AMOUNT) rotateBlock++; else rotateBlock
			 * = 0;
			 */
			//	gameSound.playRotateBlock();

			gameBlock.rotateBlock();

			bRotate = true;
			repaint();
			break;

		case KeyEvent.VK_DOWN:
			// blockLocateY += BLOCK_SIZE;
			gameBlock.moveBlockDown();
			break;

		case KeyEvent.VK_LEFT:
			// blockLocateX += -BLOCK_SIZE;
			gameBlock.moveBlockLeft();
			break;

		case KeyEvent.VK_RIGHT:
			// blockLocateX += BLOCK_SIZE;
			gameBlock.moveBlockRight();
			break;

		case KeyEvent.VK_SPACE:
			if (gameControls.isPauseGame())// pauseGame)
				break;
			gameBoard.superDrop(gameBlock);
			//
			// instantly drop brick and
			// check if brick is in bound
			//


			// updateTetris(); // update tetris values
			addObjectToBackground(); // add brick to game board
			// playSound(0); // drop tetris brick gameSound
			gameSound.playInstantDrop();

			break;
		case KeyEvent.VK_S:
			// soundOn = !soundOn;
			gameSound.setSoundOnOff();
			break;
		case KeyEvent.VK_T:
			// changeGameTheme();
			gameImage.changeBkgdTheme();
			gameImage.changeBlockTheme();
			break;
		case KeyEvent.VK_G:
			// turnOnGrid = !turnOnGrid;
			gameControls.flipOnGrid();
			break;
		case KeyEvent.VK_Q:
			// quitGame = true;
			gameControls.setQuitGame(true);
			break;
		case KeyEvent.VK_B:
			// changeBkgdTheme();
			gameImage.changeBkgdTheme();
			break;
		case KeyEvent.VK_L:
			// gameLevel++;
			gameStats.addGameLevel();
			// overrideCommand = true;
			gameControls.setOverrideCommand(true);
			break;
		case KeyEvent.VK_ESCAPE:
		case KeyEvent.VK_P:

			//
			// pause game and show
			// control dialog box
			//
			// controlKeyBox = !controlKeyBox;
			gameControls.flipControlKeyBox();
			// pauseGame = controlKeyBox;
			gameControls.setPauseGame(gameControls.isControlKeyBox());
			break;
		}

		//
		// update tetris brick with
		// new values
		//
		if (gameControls.isPauseGame()) {// pauseGame) {
			// rotateBlock = tempRotateBlock;
			// blockLocateX = tempBlockLocateX;
			// blockLocateY = tempBlockLocateY;
			gameBlock.setBlockRotate(tempRotateBlock);
			gameBlock.setBlockPosX(tempBlockLocateX);
			gameBlock.setBlockPosY(tempBlockLocateY);

		}

		else {
			// updateTetris(); // update tetris values

			//
			// if tetris brick is inside game board
			// and does not overlap another brick
			//

			// if (gameBoard.inBound(gameBlock) &&
			// !gameBoard.hasObject(gameBlock)) {
			if (gameBoard.isBlockInsideBoard(gameBlock)) {
				if (bRotate)
					gameSound.playRotateBlock();

				 //playSound(2); // rotate tetris brick gameSound
				else
					this.repaint();
			}

			//
			// update tetris brick with
			// new values
			//
			else {
				// rotateBlock = tempRotateBlock;
				// blockLocateX = tempBlockLocateX;
				// blockLocateY = tempBlockLocateY;
				gameBlock.setBlockPosX(tempBlockLocateX);
				gameBlock.setBlockPosY(tempBlockLocateY);
				gameBlock.setBlockRotate(tempRotateBlock);

				// updateTetris();

			}
		}

	}

	@Override
	public void keyTyped(KeyEvent e) {
	}

	@Override
	public void keyReleased(KeyEvent e) {
	}

	@Override
	public void actionPerformed(ActionEvent e) {

		//
		// pause game for certain action
		// for example player pause game,
		// just started, or brick animation
		//

		// if (pauseGame || animateTime > 0 || justStarted)
		boolean bPuase = gameControls.isPauseGame()
				|| gameControls.isJustStarted() || animateTime > 0;
				
		boolean bGameEnded = (!gameControls.isQuitGame() && !gameControls
				.isEndGame());

		if (bPuase)
			repaint();
		// else if (!quitGame && !endGame)
		else if (bGameEnded)
			dropBlocks(); // pull tetris brick down

	}

	public void dropBlocks() {

		int tempBlockLocateY = gameBlock.getBlockPosY();// blockLocateY;

		// blockLocateY += BLOCK_SIZE;
		gameBlock.moveBlockDown();
		// updateTetris(); // update tetris brick values

		//
		// if brick is inside game board
		// and not have the same brick
		// in the same location
		//
		// if (gameBoard.inBound(gameBlock) && !gameBoard.hasObject(gameBlock))
		if (gameBoard.isBlockInsideBoard(gameBlock))
			repaint();

		else {
			// blockLocateY = tempBlockLocateY;
			gameBlock.setBlockPosY(tempBlockLocateY);
			gameBlock.setBlockPos();

			// updateTetris();
			//
			// if no more tetris brick
			// can fit on board
			// then end game
			//
			if (gameBoard.hasObject(gameBlock)) {
				//quitGame = true;
				gameControls.setQuitGame(true);
				// playSound(3);
				gameSound.playEndGame();

			} else {

				addObjectToBackground(); // add tetris brick to game board
			}
			repaint();
		}
	}

	

	public void setGameSpeed() {
		final int DELAY_SPEED = 50;
		//
		// as player advance through
		// the levels,
		// game speed increase
		//
		// switch (gameLevel) {
		int speed = gameControls.getGameSpeed();
		
		switch (gameStats.getGameLevel()) {
		case 2:
			speed = 500;
			break;
		case 3:
			speed = 450;
			break;
		case 4:
			speed = 400;
			break;
		case 5:
			speed = 350;
			break;
		case 6:
			speed = 300;
			break;
		case 7:
			speed = 250;
			break;
		case 8:
			speed = 200;
			break;
		case 9:
			speed = 150;
			break;
		case 10:
			speed = 100;
			break;

		}
		gameControls.setGameSpeed(speed);
		//
		// change game timer speed
		// to display brick animation
		//
		if (animateTime > 0)
			gameTimer.setDelay(DELAY_SPEED);

		else
			gameTimer.setDelay(gameControls.getGameSpeed()); // return to normal timer speed
	}

	@Override
	public void mouseClicked(MouseEvent e) {
		final int ICON_POS_X1 = 475;
		final int ICON_POS_X2 = 499;
		final int ICON_POS_Y1 = 525;
		final int ICON_POS_Y2 = 560;
		//
		// if mouse is pointing at
		// gameSound image
		//
		// boolean bHar = e.getX() > 475 && e.getX() < 499;
		// boolean bVer = e.getY() > 525 && e.getY() < 560;

		boolean bHar = e.getX() > ICON_POS_X1 && e.getX() < ICON_POS_X2;
		boolean bVer = e.getY() > ICON_POS_Y1 && e.getY() < ICON_POS_Y2;
		//
		// click gameSound image to turn on/off
		//
		if (bHar && bVer)
			// soundOn = !soundOn;
			gameSound.setSoundOnOff();
	}

	@Override
	public void mousePressed(MouseEvent e) {
	}

	@Override
	public void mouseReleased(MouseEvent e) {
	}

	@Override
	public void mouseEntered(MouseEvent e) {
	}

	@Override
	public void mouseExited(MouseEvent e) {
	}

}
