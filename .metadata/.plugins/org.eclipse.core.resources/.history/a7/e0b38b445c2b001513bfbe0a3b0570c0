package games;

import java.awt.Point;
import java.util.ArrayList;

/**
 * 
 * GameObjects Create tetris bricks and game board.
 *
 */
public class GameObject {
	private int[] blockIndex;
	private int horBlockAmnt;
	private int verBlockAmnt;
	private int posX;
	private int posY;
	private int blockSize;

	private int outlineX;
	private int outlineY;
	private int outlineWidth;
	private int outlineHeight;

	private ArrayList<Point> blockPos;

	public GameObject() {
	};

	private int blockType;
	private int blockRotate;
	
	public GameObject(int[] blockIndex, int horBlockAmnt, int verBlockAmnt,
			int size) {

		// initiate object
		this.setObject(blockIndex, horBlockAmnt, verBlockAmnt, size);
	}
	public void mikeSetObject() {
		blockIndex = GameBlocks.getBlock(blockType, blockRotate);
	}
	public void mikeRotateBlock() {
		
	}
	public void mikeSetBlockType(int blockType) {
		this.blockType = blockType;
	}
	public int mikeGetBlockType() {
		return blockType;
	}
	public void mikeSetBlockDimensions(int horBlockAmnt, int verBlockAmnt,int size) {
		
		this.horBlockAmnt = horBlockAmnt;
		this.verBlockAmnt = verBlockAmnt;
		this.mikeSetObject();
		blockSize = size;

	}
	public void setObject(int[] blockIndex) {
		this.blockIndex = blockIndex;
	}

	public void setObject(int[] blockIndex, int horBlockAmnt, int verBlockAmnt,
			int size) {

		// set all values
		this.horBlockAmnt = horBlockAmnt;
		this.verBlockAmnt = verBlockAmnt;
		posX = 0;
		posY = 0;
		blockSize = size;
		blockPos = new ArrayList<>();
		setObject(blockIndex);
	}

	public void setOutline() {
		outlineX = posX;
		outlineY = posY;
		outlineWidth = blockSize * horBlockAmnt;
		outlineHeight = blockSize * verBlockAmnt;

	}

	public void setBlockPos() {
		int locate_X = posX;
		int locate_Y = posY;
		int index = 0;
		blockPos.clear();

		for (int y = 0; y < verBlockAmnt; y++) {
			for (int x = 0; x < horBlockAmnt; x++) {

				// add new block position
				if (blockIndex[index] > 0)
					blockPos.add(new Point(locate_X, locate_Y));

				locate_X += blockSize;
				index++;
			}
			locate_X = posX;
			locate_Y += blockSize;
		}
	}

	public int getBlockPosSize() {
		return blockPos.size();
	}

	public int getBlockPosX(int index) {
		return blockPos.get(index).x;
	}

	public int getBlockPosY(int index) {
		return blockPos.get(index).y;
	}

	public int getBlockIndexValue() {
		for (int i = 0; i < blockIndex.length; i++)
			if (blockIndex[i] > 0)
				return blockIndex[i];
		return 0;
	}

	public ArrayList<Point> getBlockPos() {
		return blockPos;
	}

	public Point getBlockPos(int index) {
		return blockPos.get(index);
	}

	public int getBlockIndex(int num) {
		return blockIndex[num];
	}

	public void dropBlock() {
		int size = blockIndex.length;
		int count = size - 1;
		int[] newBlocks = new int[size];

		for (int i = size - 1; i >= 0; i--) {

			// pull tetris brick down one row at a time
			if (blockIndex[i] >= 0) {
				newBlocks[count] = blockIndex[i];
				count--;
			}
		}

		blockIndex = newBlocks;
		this.setBlockPos();
	}

	public boolean hasObject(GameObject gameObject) {

		for (int i = 0; i < gameObject.getBlockPosSize(); i++) {

			// if tetris pieces do not overlapped other pieces
			if (blockPos.contains(gameObject.getBlockPos(i)))
				return true;
		}

		return false;
	}

	public void addObject(GameObject gameObject) {
		int index = 0;
		int locate_X = posX;
		int locate_Y = posY;
		boolean value = false;
		int blockSize = gameObject.getBlockSize();

		for (int y = 0; y < this.verBlockAmnt; y++) {
			for (int x = 0; x < this.horBlockAmnt; x++) {

				// if tetris pieces do not overlapped other pieces
				value = gameObject.blockPos.contains(new Point(locate_X,
						locate_Y));

				// add tetris pieces to board
				if (value)
					blockIndex[index] = gameObject.getBlockIndexValue();

				locate_X += blockSize;
				index++;
			}
			locate_X = posX;
			locate_Y += blockSize;
		}
		// update block position
		setBlockPos();

	}

	public int getFullRow() {
		int index = blockIndex.length - 1;
		int count = 0;

		for (int y = verBlockAmnt; y > 0; y--) {
			for (int x = horBlockAmnt; x > 0; x--) {

				// count brick pieces that are in a row
				if (blockIndex[index] > 0)
					count++;

				index--;
			}

			// if brick pieces equal block amount then return row number
			if (count == horBlockAmnt)
				return y;
			count = 0;

		}
		return -1;
	}

	public boolean isRowFull() {

		boolean bFlag = false;

		// if tetris brick pieces are in a row
		if (getFullRow() > 0)
			bFlag = true;

		return bFlag;
	}

	public void invertRow() {

		int row = getFullRow();
		int index = blockIndex.length - 1;

		for (int y = verBlockAmnt; y > 0; y--) {
			for (int x = horBlockAmnt; x > 0; x--) {

				// invert row of tetris brick pieces
				if (row == y)
					blockIndex[index] = blockIndex[index] * -1;

				index--;
			}
		}
	}

	public boolean inBound(GameObject gameObject) {
		int locate_X = 0;
		int locate_Y = 0;
		int horBlockAmnt = outlineX + outlineWidth;
		int verBlockAmnt = outlineY + outlineHeight;

		for (int i = 0; i < gameObject.getBlockPosSize(); i++) {
			locate_X = gameObject.getBlockPosX(i);
			locate_Y = gameObject.getBlockPosY(i);

			// if tetris brick is in bound
			if (locate_X < outlineX || locate_X >= horBlockAmnt
					|| locate_Y >= verBlockAmnt)
				return false;
		}
		return true;
	}

	public void setPosition(int posX, int posY) {
		this.posX = posX;
		this.posY = posY;
		this.setBlockPos();
		this.setOutline();
	}

	public void setPosX(int posX) {
		this.posX = posX;
	}

	public int getPosX() {
		return posX;
	}

	public void setPosY(int posY) {
		this.posY = posY;
	}

	public int getPosY() {
		return posY;
	}

	public int getHorBlockAmnt() {
		return horBlockAmnt;
	}

	public int getVerBlockAmnt() {
		return verBlockAmnt;
	}

	public int getOutlineX() {
		return outlineX;
	}

	public int getOutlineY() {
		return outlineY;
	}

	public int getOutlineWidth() {
		return outlineWidth;
	}

	public int getOutlineHeight() {
		return outlineHeight;
	}

	public int getBlockSize() {
		return blockSize;
	}

	public void setBlockSize(int blockSize) {
		this.blockSize = blockSize;
	}

	public String toString() {
		return blockPos.toString();
	}

}